openapi: 3.0.3
info:
  title: Academate - OpenAPI 3.0
  version: 1.0.0
  description: |-
    This is a sample Academate Server based on the OpenAPI 3.0 specification.
    Some useful links:
    - [The Academate repository](https://github.com/hanhnguyengiahan/academate)
    
servers:
  - url: https://localhost:52533/
tags:
  - name: auth
    description: Operations about authentication
  - name: match
    description: Everything about your course matched partner
  - name: user
    description: User operations
  # - name: store
  #   description: Access to Petstore orders
  #   externalDocs:
  #     description: Find out more about our store
  #     url: http://swagger.io
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Registering a new user with their UNSW email.
      operationId: registerUser
      requestBody:
        description: Email must be an UNSW email (ie. of the form z<7digits>@ad.unsw.edu.au).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth-Register'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth-Register-Success'
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Login user by their UNSW email and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth-Login'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth-Login-Success'
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth-Login-Failed-400'
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: User logged out successfully
  /match:
    get:
      tags:
        - match
      summary: Read info from a matching card
      description: ''
      operationId: readMatch
      parameters:
        - name: token
          in: query
          required: true
          schema: 
            type: string
            example: jsA1Hjs3amK4han5slpq
        - name: match_card_id
          in: query
          required: true
          schema: 
            type: string
            example: jsA1Hjs3amK4han5slpq
      responses:
        '200':
          description: Matching card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match-Create-Success'
    post:
      tags:
        - match
      summary: Create a matching card
      description: ''
      operationId: createMatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match-Create'
      responses:
        '200':
          description: Matching card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match-Create-Success'
    put:
      tags:
        - match
      summary: Update a matching card
      description: ''
      operationId: updateMatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match-Create'
      responses:
        '200':
          description: Matching card updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match-Create-Success'
    delete:
      tags:
        - match
      summary: Delete a matching card
      description: ''
      operationId: deleteMatch
      parameters:
        - name: token
          in: query
          required: true
          schema: 
            type: string
            example: jsA1Hjs3amK4han5slpq
        - name: match_card_id
          in: query
          required: true
          schema: 
            type: string
            example: jsA1Hjs3amK4han5slpq
      responses:
        '200':
          description: Matching card deleted successfully



components:
  schemas:
    Auth-Register:
      type: object
      properties:
        name:
          type: string
          example: Han
        email:
          type: string
          example: z1234567@ad.unsw.edu.au
        password:
          type: string
          example: '12345'
      xml:
        name: user
    Auth-Register-Success:
      type: object
      properties:
        token:
          type: string
          example: jsA1Hjs3amK4han5slpq
      xml:
        name: user
    Auth-Login:
      type: object
      properties:
        email:
          type: string
          example: z1234567@ad.unsw.edu.au
        password:
          type: string
          example: '12345'
    Auth-Login-Success:
      type: object
      properties:
        token:
          type: string
          example: jsA1Hjs3amK4han5slpq
    Auth-Login-Failed-400:
      type: object
      properties:
        message:
          type: string
          example: Invalid email or password
    Match-Create:
      type: object
      properties:
        token:
          type: string
          example: jsA1Hjs3amK4han5slpq
        course_code:
          type: string
          example: COMP1531
        grade:
          type: string
          example: HD
        objective:
          type: string
          example: I WANNA GET HD IN DIS COURSE PLZ COLLAB
    Match-Create-Success:
      type: object
      properties:
        match_card_id:
          type: string
          example: jsA1Hjs3amK4han5slpq
        course_code:
          type: string
          example: COMP1531
        grade:
          type: string
          example: HD
        objective:
          type: string
          example: I WANNA GET HD IN DIS COURSE PLZ COLLAB
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header